name: Scheduler Acceptance Gate

on:
  pull_request:
    paths:
      - 'backend/app/scheduler/**'
      - 'backend/app/core/**'
      - 'backend/requirements.txt'
  push:
    branches:
      - main
      - develop
    paths:
      - 'backend/app/scheduler/**'
      - 'backend/app/core/**'

jobs:
  acceptance-gate:
    name: Scheduler Acceptance Gate
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

        # Install OR-Tools if available (optional for CI)
        pip install ortools || echo "OR-Tools not available, using fallback"

    - name: Set up test environment
      working-directory: ./backend
      run: |
        # Create required directories
        mkdir -p logs
        mkdir -p artifacts

        # Set environment variables for testing
        echo "CI_ARTIFACTS_DIR=artifacts" >> $GITHUB_ENV
        echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV

    - name: Run Scheduler Acceptance Gate
      id: acceptance-gate
      working-directory: ./backend
      run: |
        echo "üöÄ Running Scheduler Acceptance Gate..."
        python scripts/run_acceptance_gate.py
      continue-on-error: true

    - name: Upload acceptance gate results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: acceptance-gate-results-${{ matrix.python-version }}
        path: backend/artifacts/acceptance_gate_results.json
        retention-days: 30

    - name: Upload logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: scheduler-logs-${{ matrix.python-version }}
        path: backend/logs/
        retention-days: 7

    - name: Comment on PR with results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = './backend/artifacts/acceptance_gate_results.json';

          if (fs.existsSync(path)) {
            const results = JSON.parse(fs.readFileSync(path, 'utf8'));

            const status = results.passed ? '‚úÖ PASSED' : '‚ùå FAILED';
            const emoji = results.passed ? 'üéâ' : 'üö´';

            const comment = `## ${emoji} Scheduler Acceptance Gate ${status}

${results.report}

---
*Acceptance gate results for commit ${context.sha.slice(0, 7)}*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }

    - name: Check acceptance gate result
      working-directory: ./backend
      run: |
        if [ -f "artifacts/acceptance_gate_results.json" ]; then
          PASSED=$(python -c "import json; print(json.load(open('artifacts/acceptance_gate_results.json'))['passed'])")
          if [ "$PASSED" = "True" ]; then
            echo "‚úÖ Acceptance gate passed!"
            exit 0
          else
            echo "‚ùå Acceptance gate failed!"
            exit 1
          fi
        else
          echo "‚ùå Acceptance gate results not found!"
          exit 1
        fi

  performance-regression-check:
    name: Performance Regression Check
    runs-on: ubuntu-latest
    needs: acceptance-gate
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download acceptance gate results
      uses: actions/download-artifact@v3
      with:
        name: acceptance-gate-results-3.11
        path: ./results

    - name: Check for performance regressions
      run: |
        echo "üîç Checking for performance regressions..."

        if [ -f "results/acceptance_gate_results.json" ]; then
          # Extract performance metrics
          AVG_TIME=$(python -c "
          import json
          with open('results/acceptance_gate_results.json') as f:
              data = json.load(f)
          print(data.get('avg_schedule_time_ms', 0))
          ")

          MAX_TIME=$(python -c "
          import json
          with open('results/acceptance_gate_results.json') as f:
              data = json.load(f)
          print(data.get('max_schedule_time_ms', 0))
          ")

          echo "üìä Performance Metrics:"
          echo "  Average scheduling time: ${AVG_TIME}ms"
          echo "  Maximum scheduling time: ${MAX_TIME}ms"

          # Check against thresholds
          if (( $(echo "$AVG_TIME > 5000" | bc -l) )); then
            echo "‚ö†Ô∏è WARNING: Average scheduling time exceeds 5s threshold"
          fi

          if (( $(echo "$MAX_TIME > 30000" | bc -l) )); then
            echo "‚ùå ERROR: Maximum scheduling time exceeds 30s threshold"
            exit 1
          fi

          echo "‚úÖ Performance check passed!"
        else
          echo "‚ùå No performance data available"
          exit 1
        fi

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    needs: acceptance-gate

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download acceptance gate results
      uses: actions/download-artifact@v3
      with:
        name: acceptance-gate-results-3.11
        path: ./results

    - name: Check security metrics
      run: |
        echo "üîí Checking security metrics..."

        if [ -f "results/acceptance_gate_results.json" ]; then
          SAFETY_VIOLATIONS=$(python -c "
          import json
          with open('results/acceptance_gate_results.json') as f:
              data = json.load(f)
          print(data.get('safety_violations', 0))
          ")

          echo "üõ°Ô∏è Safety violations detected: $SAFETY_VIOLATIONS"

          if [ "$SAFETY_VIOLATIONS" -gt "0" ]; then
            echo "‚ùå Security check failed: Safety violations detected"
            exit 1
          fi

          echo "‚úÖ Security check passed!"
        else
          echo "‚ùå No security data available"
          exit 1
        fi